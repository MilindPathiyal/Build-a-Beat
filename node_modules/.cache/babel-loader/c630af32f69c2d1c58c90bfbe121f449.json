{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Documents/GitHub/Build-a-Beat/src/components/Selection.js\";\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport * as Tone from \"tone\";\nimport PlayPause from \"./PlayPause.js\";\n\nclass Selection extends Component {\n  constructor(...args) {\n    super(...args);\n    this.getBpm = 120;\n    this.getPitch = 44;\n    this.getBeatDensity = 0.7;\n    this.state = {\n      steps: [[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0]],\n      bpm: this.getBpm,\n      notes: [\"A\", \"C#\", \"E\", \"F#\"],\n      column: 0,\n      activeColumn: 0,\n      time: 0,\n      masterVolume: 0,\n      kickDrumTuning: this.getPitch,\n      closedHihatDecayLevel: 0,\n      mediaRecorderState: false\n    };\n    this.appVol = new Tone.Volume();\n    this.pingPong = new Tone.PingPongDelay({\n      delayTime: \"8n\",\n      feedback: 0.32,\n      wet: 0 // wet level can be modified by user via the snaredelayknob\n\n    });\n    this.kickComp = new Tone.Compressor(-30, 2);\n    this.kick = new Tone.MembraneSynth({\n      volume: 0,\n      pitchDecay: 0.032,\n      octaves: 6,\n      oscillator: {\n        type: \"square4\"\n      },\n      envelope: {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.01,\n        release: 0.75\n      }\n    }).chain(this.kickComp, this.appVol, Tone.Master);\n    this.snare = new Tone.NoiseSynth({\n      volume: -8.3,\n      noise: {\n        type: \"pink\"\n      },\n      envelope: {\n        attack: 0.002,\n        decay: 0.21,\n        sustain: 0.05\n      }\n    }).chain(this.pingPong, this.appVol, Tone.Master);\n    this.closedHihat = new Tone.MetalSynth({\n      volume: -58,\n      frequency: 150,\n      envelope: {\n        attack: 0.002,\n        decay: 0.25,\n        release: 0.025\n      },\n      harmonicity: 4.1,\n      modulationIndex: 40,\n      resonance: 2000,\n      octaves: 1\n    }).chain(this.appVol, Tone.Master);\n\n    this.play = () => {\n      Tone.Transport.bpm.value = this.state.bpm;\n      Tone.Transport.toggle();\n    };\n\n    this.pause = () => {\n      Tone.Transport.stop();\n      console.log(\"paused\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, \"Select your preferred rhythm\"), /*#__PURE__*/React.createElement(PlayPause, {\n      play: this.play,\n      pause: this.pause,\n      playState: this.playState,\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/editor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"Confirm\")));\n  }\n\n}\n\nexport default Selection;","map":{"version":3,"sources":["/Users/michael/Documents/GitHub/Build-a-Beat/src/components/Selection.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Tone","PlayPause","Selection","getBpm","getPitch","getBeatDensity","state","steps","bpm","notes","column","activeColumn","time","masterVolume","kickDrumTuning","closedHihatDecayLevel","mediaRecorderState","appVol","Volume","pingPong","PingPongDelay","delayTime","feedback","wet","kickComp","Compressor","kick","MembraneSynth","volume","pitchDecay","octaves","oscillator","type","envelope","attack","decay","sustain","release","chain","Master","snare","NoiseSynth","noise","closedHihat","MetalSynth","frequency","harmonicity","modulationIndex","resonance","play","Transport","value","toggle","pause","stop","console","log","render","playState","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,IAAjD,QAA6D,kBAA7D;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,SAAN,SAAwBR,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCS,MADgC,GACvB,GADuB;AAAA,SAEhCC,QAFgC,GAErB,EAFqB;AAAA,SAGhCC,cAHgC,GAGf,GAHe;AAAA,SAKhCC,KALgC,GAKxB;AACNC,MAAAA,KAAK,EAAE,CACL,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CADK,EAEL,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAFK,EAGL,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAHK,CADD;AAMNC,MAAAA,GAAG,EAAE,KAAKL,MANJ;AAONM,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,CAPD;AAQNC,MAAAA,MAAM,EAAE,CARF;AASNC,MAAAA,YAAY,EAAE,CATR;AAUNC,MAAAA,IAAI,EAAE,CAVA;AAWNC,MAAAA,YAAY,EAAE,CAXR;AAYNC,MAAAA,cAAc,EAAE,KAAKV,QAZf;AAaNW,MAAAA,qBAAqB,EAAE,CAbjB;AAcNC,MAAAA,kBAAkB,EAAE;AAdd,KALwB;AAAA,SAyBhCC,MAzBgC,GAyBvB,IAAIjB,IAAI,CAACkB,MAAT,EAzBuB;AAAA,SA4BhCC,QA5BgC,GA4BrB,IAAInB,IAAI,CAACoB,aAAT,CAAuB;AAChCC,MAAAA,SAAS,EAAE,IADqB;AAEhCC,MAAAA,QAAQ,EAAE,IAFsB;AAGhCC,MAAAA,GAAG,EAAE,CAH2B,CAGxB;;AAHwB,KAAvB,CA5BqB;AAAA,SAmChCC,QAnCgC,GAmCrB,IAAIxB,IAAI,CAACyB,UAAT,CAAoB,CAAC,EAArB,EAAyB,CAAzB,CAnCqB;AAAA,SAsChCC,IAtCgC,GAsCzB,IAAI1B,IAAI,CAAC2B,aAAT,CAAuB;AAC5BC,MAAAA,MAAM,EAAE,CADoB;AAE5BC,MAAAA,UAAU,EAAE,KAFgB;AAG5BC,MAAAA,OAAO,EAAE,CAHmB;AAI5BC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE;AADI,OAJgB;AAO5BC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,IADA;AAERC,QAAAA,KAAK,EAAE,GAFC;AAGRC,QAAAA,OAAO,EAAE,IAHD;AAIRC,QAAAA,OAAO,EAAE;AAJD;AAPkB,KAAvB,EAaJC,KAbI,CAaE,KAAKd,QAbP,EAaiB,KAAKP,MAbtB,EAa8BjB,IAAI,CAACuC,MAbnC,CAtCyB;AAAA,SAsDhCC,KAtDgC,GAsDxB,IAAIxC,IAAI,CAACyC,UAAT,CAAoB;AAC1Bb,MAAAA,MAAM,EAAE,CAAC,GADiB;AAE1Bc,MAAAA,KAAK,EAAE;AACLV,QAAAA,IAAI,EAAE;AADD,OAFmB;AAK1BC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,KADA;AAERC,QAAAA,KAAK,EAAE,IAFC;AAGRC,QAAAA,OAAO,EAAE;AAHD;AALgB,KAApB,EAULE,KAVK,CAUC,KAAKnB,QAVN,EAUgB,KAAKF,MAVrB,EAU6BjB,IAAI,CAACuC,MAVlC,CAtDwB;AAAA,SAmEhCI,WAnEgC,GAmElB,IAAI3C,IAAI,CAAC4C,UAAT,CAAoB;AAChChB,MAAAA,MAAM,EAAE,CAAC,EADuB;AAEhCiB,MAAAA,SAAS,EAAE,GAFqB;AAGhCZ,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,KADA;AAERC,QAAAA,KAAK,EAAE,IAFC;AAGRE,QAAAA,OAAO,EAAE;AAHD,OAHsB;AAQhCS,MAAAA,WAAW,EAAE,GARmB;AAShCC,MAAAA,eAAe,EAAE,EATe;AAUhCC,MAAAA,SAAS,EAAE,IAVqB;AAWhClB,MAAAA,OAAO,EAAE;AAXuB,KAApB,EAYXQ,KAZW,CAYL,KAAKrB,MAZA,EAYQjB,IAAI,CAACuC,MAZb,CAnEkB;;AAAA,SAiFhCU,IAjFgC,GAiFzB,MAAM;AACXjD,MAAAA,IAAI,CAACkD,SAAL,CAAe1C,GAAf,CAAmB2C,KAAnB,GAA2B,KAAK7C,KAAL,CAAWE,GAAtC;AACAR,MAAAA,IAAI,CAACkD,SAAL,CAAeE,MAAf;AACD,KApF+B;;AAAA,SAsFhCC,KAtFgC,GAsFxB,MAAM;AACZrD,MAAAA,IAAI,CAACkD,SAAL,CAAeI,IAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAzF+B;AAAA;;AA2FhCC,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,eAEE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE,KAAKR,IADb;AAEE,MAAA,KAAK,EAAE,KAAKI,KAFd;AAGE,MAAA,SAAS,EAAE,KAAKK,SAHlB;AAIE,MAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CARF,CADF;AAcD;;AA1G+B;;AA6GlC,eAAezD,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport * as Tone from \"tone\";\n\nimport PlayPause from \"./PlayPause.js\";\n\nclass Selection extends Component {\n  getBpm = 120;\n  getPitch = 44;\n  getBeatDensity = 0.7;\n\n  state = {\n    steps: [\n      [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0],\n      [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0],\n    ],\n    bpm: this.getBpm,\n    notes: [\"A\", \"C#\", \"E\", \"F#\"],\n    column: 0,\n    activeColumn: 0,\n    time: 0,\n    masterVolume: 0,\n    kickDrumTuning: this.getPitch,\n    closedHihatDecayLevel: 0,\n    mediaRecorderState: false,\n  };\n\n  /// INIT SYNTHS & FX ///\n\n  // create master volume for App\n  appVol = new Tone.Volume();\n\n  // create pingpong delay for snare\n  pingPong = new Tone.PingPongDelay({\n    delayTime: \"8n\",\n    feedback: 0.32,\n    wet: 0, // wet level can be modified by user via the snaredelayknob\n  });\n\n  // create compressor for kick\n  kickComp = new Tone.Compressor(-30, 2);\n\n  // kick\n  kick = new Tone.MembraneSynth({\n    volume: 0,\n    pitchDecay: 0.032,\n    octaves: 6,\n    oscillator: {\n      type: \"square4\",\n    },\n    envelope: {\n      attack: 0.01,\n      decay: 0.2,\n      sustain: 0.01,\n      release: 0.75,\n    },\n  }).chain(this.kickComp, this.appVol, Tone.Master);\n\n  // snare\n  snare = new Tone.NoiseSynth({\n    volume: -8.3,\n    noise: {\n      type: \"pink\",\n    },\n    envelope: {\n      attack: 0.002,\n      decay: 0.21,\n      sustain: 0.05,\n    },\n  }).chain(this.pingPong, this.appVol, Tone.Master);\n\n  // hihat\n  closedHihat = new Tone.MetalSynth({\n    volume: -58,\n    frequency: 150,\n    envelope: {\n      attack: 0.002,\n      decay: 0.25,\n      release: 0.025,\n    },\n    harmonicity: 4.1,\n    modulationIndex: 40,\n    resonance: 2000,\n    octaves: 1,\n  }).chain(this.appVol, Tone.Master);\n\n  play = () => {\n    Tone.Transport.bpm.value = this.state.bpm;\n    Tone.Transport.toggle();\n  };\n\n  pause = () => {\n    Tone.Transport.stop();\n    console.log(\"paused\");\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2>Select your preferred rhythm</h2>\n        <PlayPause\n          play={this.play}\n          pause={this.pause}\n          playState={this.playState}\n          style={{ marginBottom: \"1rem\" }}\n        />\n        <button>\n          <Link to=\"/editor\">Confirm</Link>\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Selection;\n"]},"metadata":{},"sourceType":"module"}