{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n  return (context, nativeContext) => {\n    const nativeListener = nativeContext.listener; // Bug #117: Only Chrome & Opera support the new interface already.\n\n    const createFakeAudioParams = () => {\n      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n      const createFakeAudioParam = (input, value) => {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: value\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get() {\n            return value;\n          }\n\n        });\n        /*\n         * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        return createAudioParam({\n          context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      };\n\n      let lastOrientation = [0, 0, -1, 0, 1, 0];\n      let lastPosition = [0, 0, 0]; // tslint:disable-next-line:deprecation\n\n      scriptProcessorNode.onaudioprocess = ({\n        inputBuffer\n      }) => {\n        const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n        if (orientation.some((value, index) => value !== lastOrientation[index])) {\n          nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n          lastOrientation = orientation;\n        }\n\n        const positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];\n\n        if (positon.some((value, index) => value !== lastPosition[index])) {\n          nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n          lastPosition = positon;\n        }\n      };\n\n      channelMergerNode.connect(scriptProcessorNode);\n      return {\n        forwardX: createFakeAudioParam(0, 0),\n        forwardY: createFakeAudioParam(1, 0),\n        forwardZ: createFakeAudioParam(2, -1),\n        positionX: createFakeAudioParam(6, 0),\n        positionY: createFakeAudioParam(7, 0),\n        positionZ: createFakeAudioParam(8, 0),\n        upX: createFakeAudioParam(3, 0),\n        upY: createFakeAudioParam(4, 1),\n        upZ: createFakeAudioParam(5, 0)\n      };\n    };\n\n    const {\n      forwardX,\n      forwardY,\n      forwardZ,\n      positionX,\n      positionY,\n      positionZ,\n      upX,\n      upY,\n      upZ\n    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/michael/Documents/GitHub/composer/composer/node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","createAudioListenerFactory","createAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeScriptProcessorNode","isNativeOfflineAudioContext","context","nativeContext","nativeListener","listener","createFakeAudioParams","channelMergerNode","channelCount","channelCountMode","channelInterpretation","numberOfInputs","isOffline","scriptProcessorNode","createFakeAudioParam","input","value","constantSourceNode","offset","connect","start","Object","defineProperty","get","lastOrientation","lastPosition","onaudioprocess","inputBuffer","orientation","getChannelData","some","index","setOrientation","positon","setPosition","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","undefined"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: value\n                });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            // tslint:disable-next-line:deprecation\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => value !== lastPosition[index])) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-listener-factory.js.map"]},"metadata":{},"sourceType":"module"}